# Generated by nginxconfig.io
# See nginxconfig.txt for the configuration share link
#https://www.digitalocean.com/community/tools/nginx#?domains.0.server.path=%2Fhome&domains.0.server.documentRoot=&domains.0.https.forceHttps=false&domains.0.https.hsts=false&domains.0.https.certType=custom&domains.0.https.sslCertificate=%2Fetc%2Fnginx%2Fssl%2Fmain.crt&domains.0.https.sslCertificateKey=%2Fetc%2Fnginx%2Fssl%2Fmain.key&domains.0.php.php=false&domains.0.reverseProxy.reverseProxy=true&domains.0.reverseProxy.proxyPass=http%3A%2F%2Fnuxt%3A3000&domains.0.routing.index=index.html&domains.0.logging.errorLogEnabled=false&domains.0.logging.errorLogLevel=error&domains.0.restrict.postMethod=true&domains.0.restrict.putMethod=true&domains.0.restrict.patchMethod=true&domains.0.restrict.deleteMethod=true&domains.0.restrict.connectMethod=true&domains.0.restrict.optionsMethod=true&domains.0.restrict.traceMethod=true&global.https.portReuse=true&global.security.limitReq=true&global.reverseProxy.proxyConnectTimeout=15&global.reverseProxy.proxySendTimeout=30&global.reverseProxy.proxyReadTimeout=30&global.logging.errorLogEnabled=true&global.logging.errorLogLevel=error&global.logging.logNotFound=true&global.logging.cloudflare=true&global.logging.xForwardedFor=true&global.logging.xForwardedProto=true&global.logging.trueClientIp=true&global.logging.cfIpCountry=true&global.logging.cfVisitor=true&global.logging.cdnLoop=true&global.nginx.user=nginx&global.nginx.typesHashMaxSize=4096&global.nginx.typesHashBucketSize=1024&global.docker.dockerfile=true&global.tools.symlinkVhost=false

user                 nginx;
pid                  /run/nginx.pid;
worker_processes     auto;
worker_rlimit_nofile 65535;

# Load modules
include              /etc/nginx/modules-enabled/*.conf;

events {
    multi_accept       on;
    worker_connections 65535;
}

http {
    charset                utf-8;
    sendfile               on;
    tcp_nopush             on;
    tcp_nodelay            on;
    server_tokens          off;
    types_hash_max_size    4096;
    types_hash_bucket_size 1024;
    client_max_body_size   8M;

    # MIME
    include                mime.types;
    default_type           application/octet-stream;

    # Log Format
    log_format             cloudflare '$remote_addr - $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" $http_cf_ray $http_cf_connecting_ip $http_x_forwarded_for $http_x_forwarded_proto $http_true_client_ip $http_cf_ipcountry $http_cf_visitor $http_cdn_loop';

    # Logging
    access_log             /var/log/nginx/access.log cloudflare buffer=512k flush=1m;
    error_log              /var/log/nginx/error.log error;

    # Limits
    limit_req_log_level    warn;
    limit_req_zone         $binary_remote_addr zone=login:10m rate=10r/m;

    # SSL
    ssl_session_timeout    1d;
    ssl_session_cache      shared:SSL:10m;
    ssl_session_tickets    off;

    # Diffie-Hellman parameter for DHE ciphersuites
    ssl_dhparam            /etc/nginx/ssl/dhparam.pem;

    # Mozilla Intermediate configuration
    ssl_protocols          TLSv1.2 TLSv1.3;
    ssl_ciphers            ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;

    # Connection header for WebSocket reverse proxy
    map $http_upgrade $connection_upgrade {
        default upgrade;
        ""      close;
    }

    map $remote_addr $proxy_forwarded_elem {

        # IPv4 addresses can be sent as-is
        ~^[0-9.]+$        "for=$remote_addr";

        # IPv6 addresses need to be bracketed and quoted
        ~^[0-9A-Fa-f:.]+$ "for=\"[$remote_addr]\"";

        # Unix domain socket names cannot be represented in RFC 7239 syntax
        default           "for=unknown";
    }

    map $http_forwarded $proxy_add_forwarded {

        # If the incoming Forwarded header is syntactically valid, append to it
        "~^(,[ \\t]*)*([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\"([\\t \\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]|\\\\[\\t \\x21-\\x7E\\x80-\\xFF])*\"))?(;([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\"([\\t \\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]|\\\\[\\t \\x21-\\x7E\\x80-\\xFF])*\"))?)*([ \\t]*,([ \\t]*([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\"([\\t \\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]|\\\\[\\t \\x21-\\x7E\\x80-\\xFF])*\"))?(;([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\"([\\t \\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]|\\\\[\\t \\x21-\\x7E\\x80-\\xFF])*\"))?)*)?)*$" "$http_forwarded, $proxy_forwarded_elem";

        # Otherwise, replace it
        default "$proxy_forwarded_elem";
    }

    # Cache configuration
    proxy_cache_path
        /var/cache/nginx/nuxt levels=1:2 use_temp_path=off
        keys_zone=MY_CACHE:32m max_size=15G min_free=32m inactive=7d;

    upstream upstream_nuxt  {
        server    nuxt:3000;
        keepalive 16;
    }

    # include nginxconfig/automotiveitnews.org.conf;

    # HTTP(S)
    server {
        resolver 1.1.1.1;

        set $html_root /home;

        server_name  _;
        root         $html_root;
        index        index.html;

        # HTTP
        listen      80 reuseport default_server;
        listen      [::]:80 reuseport default_server;

        # HTTPS
        http2       on;
        listen      443 ssl;

        # SSL
        ssl_certificate     /etc/nginx/ssl/main.crt;
        ssl_certificate_key /etc/nginx/ssl/main.key;

        # security
        include     nginxconfig/security.conf;

        # restrict methods
        if ($request_method !~ ^(GET|POST|HEAD)$) {
            return '405';
        }

        # reverse proxy
        location /proxy {
            # Extract the URL parameter from the query string
            set $target_url $arg_url;

            # Default error handling
            if ($target_url = "") {
                return 400 "Bad Request: 'url' parameter is missing";
            }
            if ($target_url ~ (.+)%3A%2F%2F(.+)) { # fix :// between scheme and destination
                set $target_url $1://$2;
            }
            if ($target_url ~ (.+?)%3A(.*)) { # fix : between destination and port
                set $target_url $1:$2;
            }
            if ($target_url ~ (.+?)%2F(.*)) { # fix / after port, the rest will be decoded by proxy_pass
                set $target_url $1/$2;
            }

            # Check if the URL starts with 'http' or 'https'
            if ($target_url ~* ^(http|https)://) {
                add_header Access-Control-Allow-Origin *;
                add_header Access-Control-Allow-Methods 'GET, HEAD';
                add_header Access-Control-Allow-Headers 'Origin, X-Requested-With, Content-Type, Accept';

                proxy_pass $target_url;
            }
        }

        # reverse proxy astro
        location ^~ /api/comments {
            proxy_set_header Host $host;
            include nginxconfig/proxy.conf;

            proxy_pass http://upstream_nuxt$request_uri;
        }

        # reverse proxy astro
        location / {
            proxy_set_header Host $host;
            include               nginxconfig/proxy.conf;

            add_header X-Cache    $upstream_cache_status always;
            add_header X-Debug    $host$request_uri always;

            # Cache
            proxy_cache           MY_CACHE;
            proxy_cache_key       $host$request_uri;

            proxy_pass            http://upstream_nuxt${request_uri};
        }

        # additional config
        include nginxconfig/general.conf;
    }
}
